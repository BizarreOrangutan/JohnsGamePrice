name: Kubernetes Integration Tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  unit-tests-api-gateway:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install bun
        run: |
          curl -fsSL https://bun.sh/install | bash
          echo "BUN_INSTALL=$HOME/.bun" >> $GITHUB_ENV
          echo "PATH=$HOME/.bun/bin:$PATH" >> $GITHUB_ENV
      - name: Install dependencies
        working-directory: api-gateway
        run: bun install
      - name: Run unit tests
        working-directory: api-gateway
        run: bun test

  unit-tests-web:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install bun
        run: |
          curl -fsSL https://bun.sh/install | bash
          echo "BUN_INSTALL=$HOME/.bun" >> $GITHUB_ENV
          echo "PATH=$HOME/.bun/bin:$PATH" >> $GITHUB_ENV
      - name: Install dependencies
        working-directory: web
        run: bun install
      - name: Run unit tests
        working-directory: web
        run: bun test

  unit-tests-price-fetcher:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install dependencies
        working-directory: price-fetcher
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
      - name: Set PYTHONPATH
        run: echo "PYTHONPATH=$PYTHONPATH:$(pwd)/price-fetcher/src" >> $GITHUB_ENV
      - name: Run unit tests
        working-directory: price-fetcher
        env:
          API_KEY: dummyapikey
        run: pytest
        

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: [unit-tests-api-gateway, unit-tests-web, unit-tests-price-fetcher]
    steps:
      - uses: actions/checkout@v4

      - name: Set up KinD cluster
        uses: helm/kind-action@v1

      - name: Set up Helm
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        uses: azure/setup-helm@v3

      - name: Build Docker images
        run: |
          docker build -t johnsgameprice-api-gateway:latest ./api-gateway
          docker build -t johnsgameprice-price-fetcher:latest ./price-fetcher
          docker build -t johnsgameprice-web:latest ./web

      - name: Load images into KinD
        run: |
          kind load docker-image johnsgameprice-api-gateway:latest --name chart-testing
          kind load docker-image johnsgameprice-price-fetcher:latest --name chart-testing
          kind load docker-image johnsgameprice-web:latest --name chart-testing

      - name: Deploy stack with Helm and manifests
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISTHEREANYDEAL_API_KEY: ${{ secrets.ISTHEREANYDEAL_API_KEY }}
        run: |
          bash .deploy.test.sh

      - name: Wait for deployments and Redis to be ready
        run: |
          kubectl rollout status deployment/api-gateway -n default --timeout=120s
          kubectl rollout status deployment/price-fetcher -n default --timeout=120s
          kubectl rollout status deployment/web -n default --timeout=120s
          kubectl rollout status statefulset/redis-master -n redis --timeout=120s

      - name: Port-forward API Gateway
        run: |
          kubectl port-forward svc/api-gateway 8080:8080 &
          kubectl port-forward svc/price-fetcher 8000:8000 &
          sleep 10

      - name: Upload kubeconfig for integration tests
        uses: actions/upload-artifact@v4
        with:
          name: kubeconfig
          path: ${{ env.HOME }}/.kube/config

  integration-tests:
    runs-on: ubuntu-latest
    needs: build-and-deploy
    steps:
      - uses: actions/checkout@v4

      - name: Download kubeconfig
        uses: actions/download-artifact@v4
        with:
          name: kubeconfig
          path: ${{ env.HOME }}/.kube

      - name: Test API endpoints
        timeout-minutes: 5
        env:
          ISTHEREANYDEAL_API_KEY: ${{ secrets.ISTHEREANYDEAL_API_KEY }}
        run: |
          echo "üß™ Testing API Endpoints"
          echo "========================"
          
          # Test price-fetcher health
          echo "Testing price-fetcher health..."
          if curl -f -s http://localhost:8000/health > /dev/null; then
            echo "‚úÖ Price fetcher health check passed"
          else
            echo "‚ùå Price fetcher health check failed"
            curl -v http://localhost:8000/health || true
            exit 1
          fi
          
          # Test api-gateway health  
          echo "Testing api-gateway health..."
          if curl -f -s http://localhost:8080/health > /dev/null; then
            echo "‚úÖ API gateway health check passed"
          else
            echo "‚ùå API gateway health check failed"
            curl -v http://localhost:8080/health || true
            exit 1
          fi
          
          # Test price-fetcher game search endpoint
          echo "Testing price-fetcher game search..."
          if curl -f -s "http://localhost:8000/game-ids?title=test" > /dev/null; then
            echo "‚úÖ Price fetcher game search passed"
          else
            echo "‚ÑπÔ∏è  Price fetcher game search failed (expected with test API key)"
          fi
          
          # Test api-gateway games search endpoint (only if real API key is available)
          echo "Testing api-gateway games search endpoint..."
          if [ "$ISTHEREANYDEAL_API_KEY" != "" ]; then
            if curl -f -s "http://localhost:8080/api/games/search?query=test" > /dev/null; then
              echo "‚úÖ Games search endpoint passed"
            else
              echo "‚ùå Games search endpoint failed"
              exit 1
            fi
          else
            echo "‚ÑπÔ∏è  Skipping games search test (no real API key configured)"
          fi
          
          # Test api-gateway games search endpoint with result_num
          echo "Testing api-gateway games search endpoint with result_num..."
          if [ "$ISTHEREANYDEAL_API_KEY" != "" ]; then
            if curl -f -s "http://localhost:8080/api/games/search?query=test&result_num=15" > /dev/null; then
              echo "‚úÖ Games search endpoint with result_num passed"
            else
              echo "‚ùå Games search endpoint with result_num failed"
              exit 1
            fi
          else
            echo "‚ÑπÔ∏è  Skipping games search test with result_num (no real API key configured)"
          fi
          
          # Test price endpoint with mock data
          echo "Testing price endpoint..."
          if curl -f -s "http://localhost:8000/prices?id=test-game-id" > /dev/null; then
            echo "‚úÖ Price endpoint responded"
          else
            echo "‚ÑπÔ∏è  Price endpoint failed (expected with test API key)"
          fi
          
          echo "üéâ All endpoint tests completed!"

      - name: Show logs on failure
        if: failure()
        run: |
          kubectl get pods -A
          kubectl logs deployment/api-gateway || true
          kubectl logs deployment/price-fetcher || true
          kubectl logs deployment/web || true

      - name: Clean up
        if: always()
        run: |
          kubectl delete namespace monitoring --ignore-not-found
          kubectl delete namespace redis --ignore-not-found