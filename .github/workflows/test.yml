name: Test Project

on: 
  pull_request:
    branches: [main]
  push:
    branches: [main]
  
jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      game-id-fetcher: ${{ steps.changes.outputs.game-id-fetcher }}
      game-price-fetcher: ${{ steps.changes.outputs.game-price-fetcher }}
      web: ${{ steps.changes.outputs.web }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            game-id-fetcher:
              - 'game-id-fetcher/**'
            game-price-fetcher:
              - 'game-price-fetcher/**'
            web:
              - 'web/**'

  # Test Game ID Fetcher in Container
  test-game-id-fetcher:
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.game-id-fetcher == 'true' }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build Game ID Fetcher image
        run: |
          docker build -t game-id-fetcher:test ./game-id-fetcher
          
      - name: Run tests in container
        run: |
          docker run --rm \
            -e CLIENT_ID=test_client_id \
            -e CLIENT_SECRET=test_client_secret \
            game-id-fetcher:test \
            python -m pytest tests/ -v --cov=src --cov-report=xml
            
      - name: Extract test results
        run: |
          # Create container to extract coverage results
          docker create --name test-container game-id-fetcher:test
          docker cp test-container:/app/coverage.xml ./coverage.xml || true
          docker rm test-container
          
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: game-id-fetcher

  # Test Game Price Fetcher in Container
  test-game-price-fetcher:
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.game-price-fetcher == 'true' }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build Game Price Fetcher image
        run: |
          docker build -t game-price-fetcher:test ./game-price-fetcher
          
      - name: Run tests in container
        run: |
          docker run --rm \
            game-price-fetcher:test \
            python -m pytest tests/ -v

  # Integration Tests with Docker Compose
  integration-tests:
    runs-on: ubuntu-latest
    needs: [changes, test-game-id-fetcher, test-game-price-fetcher, test-web]
    if: always() && (needs.changes.outputs.game-id-fetcher == 'true' || needs.changes.outputs.game-price-fetcher == 'true' || needs.changes.outputs.web == 'true')
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Create test environment file
        run: |
          echo "CLIENT_ID=${{ secrets.IGDB_CLIENT_ID || 'test_client_id' }}" > .env
          echo "CLIENT_SECRET=${{ secrets.IGDB_CLIENT_SECRET || 'test_client_secret' }}" >> .env
          
      - name: Start services with Docker Compose
        run: |
          docker-compose -f docker-compose.test.yml up -d
          
      - name: Wait for services to be ready
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:8000/health; do sleep 2; done'
          timeout 60 bash -c 'until curl -f http://localhost:8001/health; do sleep 2; done'
          
      - name: Run integration tests
        run: |
          # Test API endpoints
          curl -f http://localhost:8000/game-ids?query=portal
          curl -f http://localhost:8001/prices?game_id=400
          
      - name: Stop services
        if: always()
        run: docker-compose -f docker-compose.test.yml down -v