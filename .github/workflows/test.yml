name: Test Project

on: 
  pull_request:
    branches: [main]
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      run_all_tests:
        description: 'Run all tests regardless of file changes'
        required: false
        default: false
        type: boolean
  
jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      game-id-fetcher: ${{ steps.changes.outputs.game-id-fetcher }}
      game-price-fetcher: ${{ steps.changes.outputs.game-price-fetcher }}
      api-gateway: ${{ steps.changes.outputs.api-gateway }}
      run-all: ${{ inputs.run_all_tests == true || contains(github.event.head_commit.message, '[test all]') }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            game-id-fetcher:
              - 'game-id-fetcher/**'
            game-price-fetcher:
              - 'game-price-fetcher/**'
            api-gateway:
              - 'api-gateway/**'

  test-game-id-fetcher:
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.game-id-fetcher == 'true' || needs.changes.outputs.run-all == 'true' }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build Game ID Fetcher image
        run: |
          docker build --target test -t game-id-fetcher:test ./game-id-fetcher
          
      - name: Run tests in container
        run: |
          docker run --rm \
            -e API_KEY=test_api_key \
            game-id-fetcher:test

  test-game-price-fetcher:
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.game-price-fetcher == 'true' || needs.changes.outputs.run-all == 'true' }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build Game Price Fetcher image
        run: |
          docker build --target test -t game-price-fetcher:test ./game-price-fetcher
          
      - name: Run tests in container
        run: |
          docker run --rm \
            game-price-fetcher:test

  test-api-gateway:
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.api-gateway == 'true' || needs.changes.outputs.run-all == 'true' }}
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build API Gateway image
        run: |
          docker build --target dev -t api-gateway:test ./api-gateway
          
      - name: Run tests in container
        timeout-minutes: 5
        run: |
          docker run --rm \
            --entrypoint="" \
            api-gateway:test \
            bun test --timeout 30000
            
      - name: Run lint checks
        if: success()
        timeout-minutes: 2
        run: |
          docker run --rm \
            --entrypoint="" \
            api-gateway:test \
            bun run lint

  integration-tests:
    runs-on: ubuntu-latest
    needs: [changes, test-game-id-fetcher, test-game-price-fetcher, test-api-gateway]
    if: always() && (needs.changes.outputs.game-id-fetcher == 'true' || needs.changes.outputs.game-price-fetcher == 'true' || needs.changes.outputs.api-gateway == 'true' || needs.changes.outputs.run-all == 'true')
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Create test environment file
        run: |
          echo "API_KEY=test_api_key" > .env
          
      - name: Start services with Docker Compose
        run: |
          docker compose -f docker-compose.test.yml up -d
          
      - name: Wait for services to be ready
        run: |
          echo "Waiting for services to start..."
          sleep 45
          
          # Check if containers are running
          docker compose -f docker-compose.test.yml ps
          
          # Simple connection tests (no health endpoint dependency)
          echo "Testing basic connectivity..."
          for i in {1..12}; do
            if curl -s http://localhost:8000/health > /dev/null 2>&1; then
              echo "✓ game-id-fetcher is responding"
              break
            fi
            echo "Waiting for game-id-fetcher... ($i/12)"
            sleep 5
          done
          
          for i in {1..12}; do
            if curl -s http://localhost:8001/health > /dev/null 2>&1; then
              echo "✓ game-price-fetcher is responding"
              break
            fi
            echo "Waiting for game-price-fetcher... ($i/12)"
            sleep 5
          done
          
          for i in {1..12}; do
            if curl -s http://localhost:8080/health > /dev/null 2>&1; then
              echo "✓ api-gateway is responding"
              break
            fi
            echo "Waiting for api-gateway... ($i/12)"
            sleep 5
          done
          
      - name: Show service status on failure
        if: failure()
        run: |
          echo "=== Docker Compose Services ==="
          docker compose -f docker-compose.test.yml ps
          echo "=== Game ID Fetcher logs ==="
          docker compose -f docker-compose.test.yml logs game-id-fetcher
          echo "=== Game Price Fetcher logs ==="
          docker compose -f docker-compose.test.yml logs game-price-fetcher
          echo "=== API Gateway logs ==="
          docker compose -f docker-compose.test.yml logs api-gateway
          
      - name: Run basic integration tests
        run: |
          echo "Testing basic endpoints..."
          
          # Test health endpoints
          curl -f http://localhost:8000/health
          curl -f http://localhost:8001/health  
          curl -f http://localhost:8080/health
          
          # Test Game ID Fetcher endpoint
          response=$(curl -s "http://localhost:8000/game-ids?title=portal&result_num=5")
          echo "Game ID response: $response"
          
          # Test Game Price Fetcher endpoint
          price_response=$(curl -s "http://localhost:8001/price/steam?game_id=620&currency=USD")
          echo "Price response: $price_response"
          
          # Test API Gateway proxy
          gateway_response=$(curl -s "http://localhost:8080/api/games/search?query=portal")
          echo "API Gateway response: $gateway_response"
          
      - name: Stop services
        if: always()
        run: docker compose -f docker-compose.test.yml down -v

  debug:
    runs-on: ubuntu-latest
    needs: changes
    steps:
      - name: Debug values
        run: |
          echo "run_all_tests input: ${{ inputs.run_all_tests }}"
          echo "commit message contains [test all]: ${{ contains(github.event.head_commit.message, '[test all]') }}"
          echo "run-all output: ${{ needs.changes.outputs.run-all }}"
          echo "game-id-fetcher: ${{ needs.changes.outputs.game-id-fetcher }}"
          echo "game-price-fetcher: ${{ needs.changes.outputs.game-price-fetcher }}"
          echo "api-gateway: ${{ needs.changes.outputs.api-gateway }}"