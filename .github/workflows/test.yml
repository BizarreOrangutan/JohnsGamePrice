name: Test JohnsGamePrice

on: 
  pull_request:
    branches: [main]
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      run_all_tests:
        description: 'Run all tests regardless of file changes'
        required: false
        default: false
        type: boolean
  
jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      price-fetcher: ${{ steps.changes.outputs.price-fetcher }}
      api-gateway: ${{ steps.changes.outputs.api-gateway }}
      web: ${{ steps.changes.outputs.web }}
      run-all: ${{ inputs.run_all_tests == true || contains(github.event.head_commit.message, '[test all]') }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            price-fetcher:
              - 'price-fetcher/**'
            api-gateway:
              - 'api-gateway/**'
            web:
              - 'web/**'

  test-price-fetcher:
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.price-fetcher == 'true' || needs.changes.outputs.run-all == 'true' }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build Price Fetcher test image
        run: |
          docker build --target test -t price-fetcher:test ./price-fetcher
          
      - name: Run Price Fetcher tests
        run: |
          docker run --rm \
            -e API_KEY=test_api_key \
            price-fetcher:test

      - name: Build Price Fetcher runtime image
        run: |
          docker build --target runtime -t price-fetcher:runtime ./price-fetcher

  test-api-gateway:
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.api-gateway == 'true' || needs.changes.outputs.run-all == 'true' }}
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build API Gateway dev image
        run: |
          docker build --target dev -t api-gateway:test ./api-gateway
          
      - name: Run API Gateway tests
        timeout-minutes: 5
        run: |
          docker run --rm \
            --entrypoint="" \
            api-gateway:test \
            bun test --timeout 30000
            
      - name: Run API Gateway lint checks
        if: success()
        timeout-minutes: 2
        run: |
          docker run --rm \
            --entrypoint="" \
            api-gateway:test \
            bun run lint

      - name: Build API Gateway runtime image
        run: |
          docker build --target runtime -t api-gateway:runtime ./api-gateway

  test-web:
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.web == 'true' || needs.changes.outputs.run-all == 'true' }}
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build Web dev image
        run: |
          docker build --target dev -t web:test ./web
          
      - name: Run Web tests
        timeout-minutes: 10
        run: |
          docker run --rm \
            --entrypoint="" \
            web:test \
            bun test --timeout 30000

      - name: Build Web production image
        run: |
          docker build --target runtime -t web:runtime ./web

  integration-tests:
    runs-on: ubuntu-latest
    needs: [changes, test-price-fetcher, test-api-gateway]
    if: always() && (needs.changes.outputs.price-fetcher == 'true' || needs.changes.outputs.api-gateway == 'true' || needs.changes.outputs.run-all == 'true')
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Create test environment file
        run: |
          echo "API_KEY=${{ secrets.ISTHEREANYDEAL_API_KEY || 'test_api_key' }}" > .env
          
      - name: Start services with Docker Compose
        run: |
          docker compose -f docker-compose.test.yml up -d
          
      - name: Wait for services to be ready
        timeout-minutes: 8
        run: |
          echo "Waiting for services to start..."
          sleep 60  # Give API gateway time to fully initialize
          
          # Check if containers are running
          docker compose -f docker-compose.test.yml ps
          
          # Wait for services with appropriate timing
          echo "Testing service connectivity..."
          for i in {1..12}; do
            if curl -s http://localhost:8000/health > /dev/null 2>&1; then
              echo "‚úì price-fetcher is responding"
              break
            fi
            echo "Waiting for price-fetcher... ($i/12)"
            sleep 5
          done
          
          for i in {1..12}; do
            if curl -s http://localhost:8080/health > /dev/null 2>&1; then
              echo "‚úì api-gateway is responding"
              break
            fi
            echo "Waiting for api-gateway... ($i/12)"
            sleep 10  # Longer wait between checks for API gateway
          done
          
      - name: Show service status on failure
        if: failure()
        run: |
          echo "=== Docker Compose Services ==="
          docker compose -f docker-compose.test.yml ps
          echo "=== Price Fetcher logs ==="
          docker compose -f docker-compose.test.yml logs price-fetcher
          echo "=== API Gateway logs ==="
          docker compose -f docker-compose.test.yml logs api-gateway
          
      - name: Test API endpoints
        run: |
          echo "üß™ Testing API Endpoints"
          echo "========================"
          
          # Test price-fetcher health
          echo "Testing price-fetcher health..."
          if curl -f -s http://localhost:8000/health > /dev/null; then
            echo "‚úÖ Price fetcher health check passed"
          else
            echo "‚ùå Price fetcher health check failed"
            exit 1
          fi
          
          # Test api-gateway health  
          echo "Testing api-gateway health..."
          if curl -f -s http://localhost:8080/health > /dev/null; then
            echo "‚úÖ API gateway health check passed"
          else
            echo "‚ùå API gateway health check failed"
            exit 1
          fi
          
          # Test games search endpoint (only if real API key is available)
          echo "Testing games search endpoint..."
          if [ "${{ secrets.ISTHEREANYDEAL_API_KEY }}" != "" ]; then
            if curl -f -s "http://localhost:8080/api/games/search?query=test" > /dev/null; then
              echo "‚úÖ Games search endpoint passed"
            else
              echo "‚ùå Games search endpoint failed"
              exit 1
            fi
          else
            echo "‚ÑπÔ∏è  Skipping games search test (no API key configured)"
          fi
          
          echo "üéâ All endpoint tests passed!"
          
      - name: Show final service status
        if: always()
        run: |
          echo "=== Final Service Status ==="
          docker compose -f docker-compose.test.yml ps
          
      - name: Cleanup services
        if: always()
        run: |
          docker compose -f docker-compose.test.yml down -v

  build-verification:
    runs-on: ubuntu-latest
    needs: [test-price-fetcher, test-api-gateway, test-web, integration-tests]
    if: always()
    steps:
      - name: Verify all tests passed
        run: |
          echo "Price Fetcher Tests: ${{ needs.test-price-fetcher.result }}"
          echo "API Gateway Tests: ${{ needs.test-api-gateway.result }}"
          echo "Web Tests: ${{ needs.test-web.result }}"
          echo "Integration Tests: ${{ needs.integration-tests.result }}"
          
          # Check if any required tests failed (skip if they were skipped)
          if [[ "${{ needs.test-price-fetcher.result }}" == "failure" || 
                "${{ needs.test-api-gateway.result }}" == "failure" || 
                "${{ needs.test-web.result }}" == "failure" || 
                "${{ needs.integration-tests.result }}" == "failure" ]]; then
            echo "‚ùå Some tests failed"
            exit 1
          else
            echo "‚úÖ All tests completed successfully"
          fi

  debug:
    runs-on: ubuntu-latest
    needs: changes
    steps:
      - name: Debug workflow values
        run: |
          echo "üîç Workflow Debug Information"
          echo "================================"
          echo "run_all_tests input: ${{ inputs.run_all_tests }}"
          echo "commit message contains [test all]: ${{ contains(github.event.head_commit.message, '[test all]') }}"
          echo "run-all output: ${{ needs.changes.outputs.run-all }}"
          echo "price-fetcher changed: ${{ needs.changes.outputs.price-fetcher }}"
          echo "api-gateway changed: ${{ needs.changes.outputs.api-gateway }}"
          echo "web changed: ${{ needs.changes.outputs.web }}"
          echo "event name: ${{ github.event_name }}"
          echo "ref: ${{ github.ref }}"